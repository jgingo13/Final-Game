<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create level 
show_debug_message("new level");

// Set score 
ini_open("score.ini");
current_score = ini_read_real("scoring", "current_score",0);
if (current_score == 0) {
    score = 0; 
}
else {
    score = current_score;
}
ini_close();

// Create the level grid
level_width = 20+global.level;
level_height = 20+global.level;

// Set room size
room_width = CELL_WIDTH * level_width; 
room_height = CELL_HEIGHT * level_height; 


grid_level = ds_grid_create(level_width, level_width);
ds_grid_clear(grid_level, 0); // empty

randomize();

// get start point for building room
xx = irandom(level_width);
yy = irandom(level_height);
ds_grid_set_region(grid_level, xx, yy, xx, yy,1);

// Create the player and obj manager
instance_create(xx*CELL_WIDTH+CELL_WIDTH/2, yy*CELL_HEIGHT+CELL_HEIGHT/2, obj_player);
instance_create(0,0,obj_manager);

//////////////// Create all floor tiles //////////////////////////
while(ds_grid_get_sum(grid_level,0,0,level_width-1,level_height-1) &lt; level_width*level_height/2) {
    // random rectangle
    if (irandom(1) == 1) {
        rect_w = irandom(4);
        rect_h = irandom(1);
    } else {
        rect_w = irandom(1);
        rect_h = irandom(4);
    }
    
    rect_x = xx + irandom_range(-rect_w,0);
    rect_y = yy + irandom_range(-rect_h,0);
    
    // ensure values are within grid (leveling boundary for wall)
    rect_x = clamp(rect_x, 1, level_width-2-rect_w);
    rect_y = clamp(rect_y, 1, level_height-2-rect_h);
    
    // set rect values in grid
    ds_grid_set_region(grid_level, rect_x, rect_y, rect_x+rect_w, rect_y+rect_h,1);

    // reset start point from a rect corner
    dir = irandom(3); 
    if (dir % 2) {
        xx = rect_x;
    } else {
        xx = rect_x+rect_w;
    }
    
    if (dir &lt; 2) {
        yy = rect_y;
    } else {
        yy = rect_y+rect_h;
    }
}


///////////// now have a room with floors = 0 and non-floors = 1 ////////////////////
// assign floor tiles and wall ids
for (var yyy = 0; yyy &lt; level_height; yyy++) {
    for (var xxx = 0; xxx &lt; level_width; xxx++) {
        // if empty
        if(ds_grid_get(grid_level, xxx, yyy) == 0) {
            
        }
        
        // if floor
        else if (ds_grid_get(grid_level, xxx, yyy) == 1) {
            // add floor tiles
            last_x = xxx*CELL_WIDTH+CELL_WIDTH/2;
            last_y = yyy*CELL_HEIGHT+CELL_HEIGHT/2;
            
            var floor_id = tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xxx*CELL_WIDTH, yyy*CELL_HEIGHT, 0); 
            global.num_floors++;
            with (obj_manager) {
                ds_list_add(floor_list, floor_id);
            }
            
            // check for walls (value = 2)
            if (ds_grid_get(grid_level, xxx+1, yyy) != 1) {
                ds_grid_set(grid_level, xxx+1, yyy, 2);
                var wall_id = instance_create((xxx+1)*CELL_WIDTH, yyy*CELL_HEIGHT, invisible_wall);
                with (obj_manager) {
                    ds_list_add(wall_list, wall_id);
                }
            }
            // ...left
            if (ds_grid_get(grid_level, xxx-1, yyy) != 1) {
                ds_grid_set(grid_level, xxx-1, yyy, 2);
                var wall_id = instance_create((xxx-1)*CELL_WIDTH, yyy*CELL_HEIGHT, invisible_wall);
                with (obj_manager) {
                    ds_list_add(wall_list, wall_id);
                }
            }
            // ...bottom
            if (ds_grid_get(grid_level, xxx, yyy+1) != 1) {
                ds_grid_set(grid_level, xxx, yyy+1, 2);
                var wall_id = instance_create(xxx*CELL_WIDTH, (yyy+1)*CELL_HEIGHT, invisible_wall);
                with (obj_manager) {
                    ds_list_add(wall_list, wall_id);
                }
            }
            // ...top
            if (ds_grid_get(grid_level, xxx, yyy-1) != 1) {
                ds_grid_set(grid_level, xxx, yyy-1, 2);
                var wall_id = instance_create(xxx*CELL_WIDTH, (yyy-1)*CELL_HEIGHT, invisible_wall);
                with (obj_manager) {
                    ds_list_add(wall_list, wall_id);
                }
            }
        }
    }   
}

// Create door
with (obj_manager) {
    // get random wall id
    var odds_wall = ds_list_size(wall_list);
    var selected_id = irandom(odds_wall);
    
    // get x and y of floor tile
    global.door_id = ds_list_find_value(wall_list,selected_id);
    
    with (global.door_id) {
        image_index = 1;
    }
}

///////////////////// Final room //////////////////////////////////////////
// add minimap and obj manager
instance_create(view_xview+5,view_yview+5,obj_mini_map);

global.play = true;
global.SPD = 1;
audio_sound_gain(sd_cock, 0.3, 0);

// Create particle system
global.particle_system = part_system_create();
part_system_depth(global.particle_system, -100000);

global.collect_diamond_p = part_type_create();
global.collect_diamond_e = part_emitter_create(global.particle_system);

global.destroy_enemy_p = part_type_create();
global.destroy_enemy_e = part_emitter_create(global.particle_system);

global.player_death_p = part_type_create();
global.player_death_e = part_emitter_create(global.particle_system);

global.level_complete_p = part_type_create();
global.level_complete_e = part_emitter_create(global.particle_system);

global.currency_p = part_type_create();
global.currency_e = part_emitter_create(global.particle_system);

show_debug_message("end create level obj");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>odds = 10000;
if (irandom(odds) == 1) {
    audio_play_sound(sd_random_boom,10,false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Destroy the grid
ds_grid_destroy(grid_level);

// Destroy particles
part_type_destroy(global.collect_diamond_p);
part_type_destroy(global.destroy_enemy_p);
part_type_destroy(global.player_death_p);
part_type_destroy(global.level_complete_p);
part_type_destroy(global.currency_p);

part_emitter_destroy(global.particle_system,global.collect_diamond_e);
part_emitter_destroy(global.particle_system,global.destroy_enemy_e);
part_emitter_destroy(global.particle_system,global.player_death_e);
part_emitter_destroy(global.particle_system,global.level_complete_e);
part_emitter_destroy(global.particle_system,global.currency_e);

part_system_destroy(global.particle_system);

show_debug_message("end room");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw score
draw_set_alpha(0.7);
if (score &lt;100) {
    draw_set_colour(c_gray);
    draw_rectangle(5, 5, 195, 110, false);
    draw_set_colour(c_white);
    draw_rectangle(5, 5, 195, 110, true);
} else if(score &lt;1000) {
    ini_open("design.ini");
    ini_close();
    draw_set_colour(c_gray);
    draw_rectangle(5, 5, 220, 110, false);

    draw_set_colour(c_white);
    draw_rectangle(5, 5, 220, 110, true);
} else {
    ini_open("design.ini");
    ini_close();
    draw_set_colour(c_gray);
    draw_rectangle(5, 5, 235, 110, false);

    draw_set_colour(c_white);
    draw_rectangle(5, 5, 235, 110, true);
}

draw_set_halign(fa_left);
draw_set_colour(c_white);
draw_set_alpha(1);
draw_set_font(font_text_instructions);
draw_text(10,10, "Level:  " + string(global.level));
draw_text(10,60, "Score:  " + string(score));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// quit game
if(!instance_exists(obj_escape)) {
    instance_create(0,0,obj_escape);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
