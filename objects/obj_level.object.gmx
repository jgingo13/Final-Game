<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_level</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CREATE THE LEVEL
show_debug_message("new level");

// Set room size -- grow with level
room_width = (CELL_WIDTH/16) * (304 + global.level*32); 
room_height = (CELL_HEIGHT/16) * (304 + global.level*32); 

// Set the grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;
show_debug_message(width);
show_debug_message(height);

// Set score 
ini_open("score.ini");
current_score = ini_read_real("scoring", "current_score",0);
if (current_score == 0) {
    score = 0; 
}
else {
    score = current_score;
}
ini_close();


// Create the grid
grid = ds_grid_create(width, height);
ds_grid_set_region(grid, 0, 0, width-1, height-1, VOID);

// Randomize grid
randomize();

// Create the controller in the center of the grid
var cx = width div 2;
var cy = height div 2;

// Create the player and obj manager
instance_create(cx*CELL_WIDTH+CELL_WIDTH/2, cy*CELL_HEIGHT+CELL_HEIGHT/2, obj_player);
instance_create(0,0,obj_manager);

// Give the controller a random direction
var cdir = irandom(3);
// The odds variable for changing direction
var odds = 3;

// Create the level using provided step count
repeat(800+global.level*50) {
    // Place a floor tile at the controller position
    grid[# cx, cy] = FLOOR;
    
    // Randomize the direction of the controller
    if (irandom(odds) == odds) {
        cdir = irandom(3);
    }
    
    // Move the controller 
    var xdir = lengthdir_x(1, cdir*90);
    var ydir = lengthdir_y(1, cdir*90);
    cx += xdir;
    cy += ydir;
    
    // stay within grid (leave a boundary outside)
    cx = clamp(cx, 1, width-2);
    cy = clamp(cy, 1, height-2);
}

// Assign and add walls
for (var yy = 1; yy &lt; height-1; yy++) {
    for (var xx = 1; xx &lt; width-1; xx++) {
        if (grid[# xx, yy] == FLOOR) {
            // Check for walls to right
            if (grid[# xx+1, yy] != FLOOR) {
                grid[# xx+1, yy] = WALL;
                instance_create((xx+1)*CELL_WIDTH, yy*CELL_HEIGHT, invisible_wall);
            }
            // ...left
            if (grid[# xx-1, yy] != FLOOR) {
                grid[# xx-1, yy] = WALL;
                instance_create((xx-1)*CELL_WIDTH, yy*CELL_HEIGHT, invisible_wall);
            }
            // ...bottom
            if (grid[# xx, yy+1] != FLOOR) {
                grid[# xx, yy+1] = WALL;
                instance_create(xx*CELL_WIDTH, (yy+1)*CELL_HEIGHT, invisible_wall);
            }
            // ...top
            if (grid[# xx, yy-1] != FLOOR) {
                grid[# xx, yy-1] = WALL;
                instance_create(xx*CELL_WIDTH, (yy-1)*CELL_HEIGHT, invisible_wall);
            }
        }
    }
}

// Add floor tiles
var last_x = 0;
var last_y = 0;

for (var yy = 0; yy &lt; height; yy++) {
    for (var xx = 0; xx &lt; width; xx++) {
        if (grid[# xx, yy] == FLOOR) {
            last_x = xx*CELL_WIDTH+CELL_WIDTH/2;
            last_y = yy*CELL_HEIGHT+CELL_HEIGHT/2;
            
            // Add floor tiles and add to obj_manager
            var floor_id = tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0); // returns index of tile
            global.num_floors++;
            with (obj_manager) {
                ds_list_add(floor_list, floor_id);
            }
        } 
    }
}

// Get tile sizes
var tw = CELL_WIDTH/2;
var th = CELL_HEIGHT/2;

// ADD THE WALL TILES
// Loop through each section that might have a tile
for (var yy = 0; yy &lt; height*2; yy++) {
    for (var xx = 0; xx &lt; width*2; xx++) {
        //Only place tiles around us if we are a Floor tile
        if (grid[# xx div 2, yy div 2] == FLOOR) { // div 2 converts from tile # to grid #
            // Get the tile's x and y
            var tx = xx*tw;
            var ty = yy*th;
            
            // Check position of all 8 adjacent tiles
            var right = grid[# (xx+1) div 2, yy div 2] != FLOOR;
            var left = grid[# (xx-1) div 2, yy div 2] != FLOOR;
            var top = grid[# xx div 2, (yy-1) div 2] != FLOOR;
            var bottom = grid[# xx div 2, (yy+1) div 2] != FLOOR;
            
            var top_right = grid[# (xx+1) div 2, (yy-1) div 2] != FLOOR;
            var top_left = grid[# (xx-1) div 2, (yy-1) div 2] != FLOOR;
            var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] != FLOOR;
            var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] != FLOOR;
            
            // if no floor tile to right
            if (right) {
                if (bottom) {
                    if (bottom_right) {
                        var wall_id2 = tile_add(bg_walltiles, tw*4, th*2, tw, th, tx+tw, ty+th, -1);
                        with (obj_manager) {
                            ds_list_add(wall_list, wall_id2);
                        }
                    } 
                    var wall_id = tile_add(bg_walltiles, tw*4, th*1, tw, th, tx+tw, ty, 0);
                    with (obj_manager) {
                        ds_list_add(wall_list, wall_id);
                    }
                } else if (top) {
                    if (top_right) {
                        var wall_id = tile_add(bg_walltiles, tw*4, th*0, tw, th, tx+tw, ty-th, -1);
                        with (obj_manager) {
                            ds_list_add(wall_list, wall_id);
                        }
                    } else {
                        var wall_id = tile_add(bg_walltiles, tw*3, th*0, tw, th, tx, ty-th, -1);
                        with (obj_manager) {
                            ds_list_add(wall_list, wall_id);
                        }
                    }
                    var wall_id = tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, 0);
                    with (obj_manager) {
                        ds_list_add(wall_list, wall_id);
                    }
                } 
                else {
                    var wall_id = tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, 0); // 0 from left, 1 from top
                                                                // +tw shifts it over to right one tile so not overlap floor tile
                    with (obj_manager) {
                        ds_list_add(wall_list, wall_id);
                    }
                }
            }
            
            // if no floor tile to left
            if (left) {
                if (bottom) {
                    if (bottom_left) {
                        var wall_id2 = tile_add(bg_walltiles, tw*3, th*2, tw, th, tx-tw, ty+th, -1);
                        with (obj_manager) {
                            ds_list_add(wall_list, wall_id2);
                        }
                    }
                    var wall_id = tile_add(bg_walltiles, tw*3, th*1, tw, th, tx-tw, ty, 0);
                    with (obj_manager) {
                        ds_list_add(wall_list, wall_id);
                    }
                    
                } else if (top) {
                    if (top_left) {
                        var wall_id = tile_add(bg_walltiles, tw*3, th*0, tw, th, tx-tw, ty-th, -1);
                        with (obj_manager) {
                            ds_list_add(wall_list, wall_id);
                        }
                    } else {
                        var wall_id = tile_add(bg_walltiles, tw*4, th*0, tw, th, tx, ty-th, -1);
                        with (obj_manager) {
                            ds_list_add(wall_list, wall_id);
                        }
                    }
                    var wall_id = tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, 0);
                    with (obj_manager) {
                        ds_list_add(wall_list, wall_id);
                    }
                } else {
                    var wall_id = tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, 0);
                    with (obj_manager) {
                        ds_list_add(wall_list, wall_id);
                    }
                }
            }
            
            // if no floor tile to top
            if (top) {
                if (!top_right) {
                    var wall_id = tile_add(bg_walltiles, tw*2, th*2, tw, th, tx, ty-th, -1);
                    with (obj_manager) {
                        ds_list_add(wall_list, wall_id);
                    }
                } else if (!top_left) {
                    var wall_id = tile_add(bg_walltiles, tw*0, th*2, tw, th, tx, ty-th, -1);
                    with (obj_manager) {
                        ds_list_add(wall_list, wall_id);
                    }
                } else {
                    var wall_id = tile_add(bg_walltiles, tw*1, th*2, tw, th, tx, ty-th, 0);  
                    with (obj_manager) {
                        ds_list_add(wall_list, wall_id);
                    }
                }
            }
            
            // if no floor tile below
            if (bottom) {
                if (!bottom_right) { // floor tile to bottom right
                    var wall_id = tile_add(bg_walltiles, tw*2, th*0, tw, th, tx, ty+th,-1);  
                    with (obj_manager) {
                        ds_list_add(wall_list, wall_id);
                    }
                } else if (!bottom_left) {
                    var wall_id = tile_add(bg_walltiles, tw*0, th*0, tw, th, tx, ty+th, -1);
                    with (obj_manager) {
                        ds_list_add(wall_list, wall_id);
                    }
                } else {
                    var wall_id = tile_add(bg_walltiles, tw*1, th*0, tw, th, tx, ty+th, 0);
                    with (obj_manager) {
                        ds_list_add(wall_list, wall_id);
                    }
                }
            }
            
////////////// ADD DOOR /////////////////////////////////////////////////////////////////////////
            if (!instance_exists(obj_door_v) &amp;&amp; !instance_exists(obj_door_h)) {
                var odds3 = 30;
                if (point_distance(tx, ty, obj_player.x, obj_player.y) &gt; 100 &amp;&amp; irandom(odds3)==odds3) {
                    
                    // if no floor tile to right
                    if (right) {
                        if (!bottom &amp;&amp; !top &amp;&amp; top_right &amp;&amp; bottom_right) {
                            instance_create(tx+tw-1, ty, obj_door_v);
                        }
                    }
                    if (!instance_exists(obj_door_v) &amp;&amp; !instance_exists(obj_door_h)) {
                        // if no floor tile to left
                        if (left) {
                            if (!bottom &amp;&amp; !top &amp;&amp; top_left &amp;&amp; bottom_left) {
                                instance_create(tx-24, ty, obj_door_v);
                            }
                        }
                    }
                    if (!instance_exists(obj_door_v) &amp;&amp; !instance_exists(obj_door_h)) {
                        // if no floor tile to top
                        if (top) {
                            if (!left &amp;&amp; !right &amp;&amp; top_right &amp;&amp; top_left) {
                                instance_create(tx, ty-24, obj_door_h);
                            }
                        }
                    }
                    
                    if (!instance_exists(obj_door_v) &amp;&amp; !instance_exists(obj_door_h)) {
                    // if no floor tile below
                        if (bottom) {
                            if (!left &amp;&amp; !right &amp;&amp; bottom_right &amp;&amp; bottom_left) {
                                instance_create(tx, ty+th-1, obj_door_h);
                            }
                        }
                    }
                }
            }
        }
    }
}


// add minimap and obj manager
instance_create(view_xview+5,view_yview+5,obj_mini_map);

global.play = true;
global.SPD = 1;
audio_sound_gain(sd_cock, 0.3, 0);

// Create particle system
global.particle_system = part_system_create();
part_system_depth(global.particle_system, -100000);

global.collect_diamond_p = part_type_create();
global.collect_diamond_e = part_emitter_create(global.particle_system);

global.destroy_enemy_p = part_type_create();
global.destroy_enemy_e = part_emitter_create(global.particle_system);

global.player_death_p = part_type_create();
global.player_death_e = part_emitter_create(global.particle_system);

global.level_complete_p = part_type_create();
global.level_complete_e = part_emitter_create(global.particle_system);

global.currency_p = part_type_create();
global.currency_e = part_emitter_create(global.particle_system);

// if no door created, restart room
if (!instance_exists(obj_door_v) &amp;&amp; !instance_exists(obj_door_h)) {
    show_debug_message("restart room bc no door created");
    room_restart();
}

show_debug_message("end create level obj");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>odds = 10000;
if (irandom(odds) == 1) {
    audio_play_sound(sd_random_boom,10,false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Destroy the grid
ds_grid_destroy(grid);

// Destroy particles
part_type_destroy(global.collect_diamond_p);
part_type_destroy(global.destroy_enemy_p);
part_type_destroy(global.player_death_p);
part_type_destroy(global.level_complete_p);
part_type_destroy(global.currency_p);

part_emitter_destroy(global.particle_system,global.collect_diamond_e);
part_emitter_destroy(global.particle_system,global.destroy_enemy_e);
part_emitter_destroy(global.particle_system,global.player_death_e);
part_emitter_destroy(global.particle_system,global.level_complete_e);
part_emitter_destroy(global.particle_system,global.currency_e);

part_system_destroy(global.particle_system);

show_debug_message("end room");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw score
draw_set_alpha(0.7);
if (score &lt;100) {
    draw_set_colour(c_gray);
    draw_rectangle(5, 5, 195, 110, false);
    draw_set_colour(c_white);
    draw_rectangle(5, 5, 195, 110, true);
} else if(score &lt;1000) {
    ini_open("design.ini");
    ini_close();
    draw_set_colour(c_gray);
    draw_rectangle(5, 5, 220, 110, false);

    draw_set_colour(c_white);
    draw_rectangle(5, 5, 220, 110, true);
} else {
    ini_open("design.ini");
    ini_close();
    draw_set_colour(c_gray);
    draw_rectangle(5, 5, 235, 110, false);

    draw_set_colour(c_white);
    draw_rectangle(5, 5, 235, 110, true);
}

draw_set_halign(fa_left);
draw_set_colour(c_white);
draw_set_alpha(1);
draw_set_font(font_text_instructions);
draw_text(10,10, "Level:  " + string(global.level));
draw_text(10,60, "Score:  " + string(score));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// quit game
if(!instance_exists(obj_escape)) {
    instance_create(0,0,obj_escape);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
